syntax = "proto3";

package saffron.runtime;

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/wrappers.proto";

import "common/identity.proto";
import "common/uuid.proto";
import "eventstore.proto";
import "task.proto";

service Runtime {
  // Primitive
  rpc FetchPayload(FetchPayloadRequest) returns (FetchPayloadResponse);
  rpc FetchTask(FetchTaskRequest) returns (FetchTaskResponse);

  // Logic Railway
  rpc IsRailwayOk(IsRailwayOkRequest) returns (google.protobuf.BoolValue);
  rpc SwitchRailway(RailwaySwitchRequest) returns (google.protobuf.Empty);
  rpc GetRailwayError(GetRailwayErrorRequest) returns (GetRailwayErrorResponse);

  // Logic Variable
  rpc GetLogicVariable(GetLogicVariableRequest) returns (GetLogicVariableResponse);

  // Database Agent
  rpc AcquireDatabase(AcquireDatabaseRequest) returns (AcquireDatabaseResponse);
  rpc ReleaseDatabase(ReleaseDatabaseRequest) returns (google.protobuf.Empty);
  rpc QueryDatabase(QueryDatabaseRequest) returns (QueryDatabaseResponse);
  rpc ExecuteDatabase(ExecuteDatabaseRequest) returns (ExecuteDatabaseResponse);
  rpc BeginTransaction(BeginTransactionRequest) returns (google.protobuf.Empty);
  rpc CommitTransaction(CommitTransactionRequest) returns (google.protobuf.Empty);
  rpc RollbackTransaction(RollbackTransactionRequest) returns (google.protobuf.Empty);

  // Event Agent
  rpc EmitEvent(EmitEventRequest) returns (google.protobuf.Empty);
  rpc SearchEvent(SearchEventRequest) returns (SearchEventResponse);
  rpc SearchEventWithPattern(SearchEventWithPatternRequest)
      returns (SearchEventWithPatternResponse);

  // FileStorage Agent
  rpc AcquireFileStorage(AcquireFileStorageRequest) returns (AcquireFileStorageResponse);
  rpc SimpleGetFile(SimpleGetFileRequest) returns (SimpleGetFileResponse);
  rpc SimplePutFile(SimplePutFileRequest) returns (SimplePutFileResponse);
  rpc DeleteFile(DeleteFileRequest) returns (google.protobuf.Empty);
  rpc ListFile(ListFileRequest) returns (ListFileResponse);
  rpc CreateDirAll(CreateDirAllRequest) returns (google.protobuf.Empty);

  // HTTP Agent
  rpc AcquireHttp(AcquireHttpRequest) returns (AcquireHttpResponse);
  rpc SendHttp(SendHttpRequest) returns (SendHttpResponse);

  // LocalStorage Agent
  rpc LocalStorageGet(LocalStorageGetRequest) returns (LocalStorageGetResponse);
  rpc LocalStoragePut(LocalStoragePutRequest) returns (google.protobuf.Empty);
  rpc LocalStorageDelete(LocalStorageDeleteRequest) returns (google.protobuf.Empty);

  // Logging Agent
  rpc Log(LogRequest) returns (google.protobuf.Empty);

  // Mail Agent

  // Result Agent
  rpc SetResult(SetResultRequest) returns (google.protobuf.Empty);
  rpc SetHttpStatusCode(SetHttpStatusCodeRequest) returns (google.protobuf.Empty);

  // SessionStorage Agent
  rpc SessionStorageGet(SessionStorageGetRequest) returns (SessionStorageGetResponse);
  rpc SessionStoragePut(SessionStoragePutRequest) returns (google.protobuf.Empty);
  rpc SessionStorageDelete(SessionStorageDeleteRequest) returns (google.protobuf.Empty);
}

// Primitive
message FetchPayloadRequest {
  saffron.execution.TaskKey task_key = 1;
}

message FetchPayloadResponse {
  saffron.execution.TaskPayload task_payload = 1;
}

message FetchTaskRequest {
  saffron.execution.TaskKey task_key = 1;
}

message FetchTaskResponse {
  saffron.execution.Task task = 1;
}

// Logic Railway
message IsRailwayOkRequest {
  saffron.execution.TaskKey task_key = 1;
}

message RailwaySwitchRequest {
  saffron.execution.TaskKey task_key = 1;
  string name = 2;
  string message = 3;
}

message GetRailwayErrorRequest {
  saffron.execution.TaskKey task_key = 1;
}

message GetRailwayErrorResponse {
  optional RailwayError error = 1;
}

message RailwayError {
  string name = 1;
  string message = 2;
  saffron.common.VersionedIdentity logic_identity = 3;
}

// Logic Variable
message GetLogicVariableRequest {
  saffron.execution.TaskKey task_key = 1;
  string name = 2;
}

message GetLogicVariableResponse {
  optional string value = 1;
}

// Database Agent
message AcquireDatabaseRequest {
  saffron.execution.TaskKey task_key = 1;
  string name = 2;
}

message AcquireDatabaseResponse {
  string data_source_id = 1;
  string connection_id = 2;
}

message ReleaseDatabaseRequest {
  saffron.execution.TaskKey task_key = 1;
  string data_source_id = 2;
  string connection_id = 3;
}

message QueryDatabaseRequest {
  saffron.execution.TaskKey task_key = 1;
  string data_source_id = 2;
  string connection_id = 3;
  string raw_sql = 4;
  google.protobuf.ListValue params = 5;
}

message QueryDatabaseResponse {
  repeated DatabaseColumn columns = 1;
  repeated google.protobuf.ListValue rows = 2;
}

message ExecuteDatabaseRequest {
  saffron.execution.TaskKey task_key = 1;
  string data_source_id = 2;
  string connection_id = 3;
  string raw_sql = 4;
  google.protobuf.ListValue params = 5;
}

message ExecuteDatabaseResponse {
  uint64 affected_rows = 1;
}

message BeginTransactionRequest {
  saffron.execution.TaskKey task_key = 1;
  string data_source_id = 2;
  string connection_id = 3;
}

message CommitTransactionRequest {
  saffron.execution.TaskKey task_key = 1;
  string data_source_id = 2;
  string connection_id = 3;
}

message RollbackTransactionRequest {
  saffron.execution.TaskKey task_key = 1;
  string data_source_id = 2;
  string connection_id = 3;
}

message DatabaseColumn {
  string name = 1;
  string type = 2;
}

// Event Agent
message EmitEventRequest {
  message EventArgs {
    string label_name = 1;
    string source_digital_identity = 2;
    string target_digital_identity = 3;
    string meta = 4;
    optional string type = 5;
  }

  saffron.execution.TaskKey task_key = 1;
  repeated EventArgs events = 2;
}

message SearchEventRequest {
  saffron.execution.TaskKey task_key = 1;
  repeated saffron.event.Query queries = 2;
  repeated saffron.event.Query excludes = 3;
  repeated saffron.event.Filter filters = 4;
  repeated saffron.event.Sort sorts = 5;
  optional saffron.event.Aggregation aggregation = 6;
  optional uint64 from = 7;
  optional uint64 size = 8;
}

message SearchEventResponse {
  uint64 took = 1;
  uint64 count = 2;
  uint64 total = 3;
  repeated saffron.event.Event events = 4;
  optional saffron.event.AggregationResult aggregation = 5;
}

message SearchEventWithPatternRequest {
  saffron.execution.TaskKey task_key = 1;
  repeated saffron.event.Sequence sequences = 2;
  optional string max_span = 3;
  optional saffron.event.Filter filter = 4;
}

message SearchEventWithPatternResponse {
  message SequenceResult {
    repeated string join_keys = 1;
    repeated saffron.event.Event events = 2;
  }

  uint64 took = 1;
  uint64 count = 2;
  uint64 total = 3;
  repeated SequenceResult sequences = 4;
}

// FileStorage Agent
message AcquireFileStorageRequest {
  saffron.execution.TaskKey task_key = 1;
  string name = 2;
}

message AcquireFileStorageResponse {
  saffron.common.Uuid agent_configuration_id = 1;
}

message SimpleGetFileRequest {
  saffron.execution.TaskKey task_key = 1;
  saffron.common.Uuid configuration_id = 2;
  string path = 3;
}

message SimpleGetFileResponse {
  bytes content = 1;
}

message SimplePutFileRequest {
  saffron.execution.TaskKey task_key = 1;
  saffron.common.Uuid configuration_id = 2;
  string path = 3;
  bytes data = 4;
  bool ensure_dir = 5;
}

message SimplePutFileResponse {
  uint64 size = 1;
}

message DeleteFileRequest {
  saffron.execution.TaskKey task_key = 1;
  saffron.common.Uuid configuration_id = 2;
  string path = 3;
}

message ListFileRequest {
  saffron.execution.TaskKey task_key = 1;
  saffron.common.Uuid configuration_id = 2;
  string path = 3;
}

message ListFileResponse {
  enum FileType {
    FILE_TYPE_UNSPECIFIED = 0;
    FILE_TYPE_FILE = 1;
    FILE_TYPE_DIRECTORY = 2;
    FILE_TYPE_SYMBOLIC_LINK = 3;
  }

  message FileInfo {
    FileType type = 1;
    string name = 2;
  }

  repeated FileInfo files = 1;
}

message CreateDirAllRequest {
  saffron.execution.TaskKey task_key = 1;
  saffron.common.Uuid configuration_id = 2;
  string path = 3;
}

// HTTP Agent
message AcquireHttpRequest {
  saffron.execution.TaskKey task_key = 1;
  string name = 2;
}

message AcquireHttpResponse {
  saffron.common.Uuid agent_configuration_id = 1;
}

message SendHttpRequest {
  saffron.execution.TaskKey task_key = 1;
  saffron.common.Uuid configuration_id = 2;
  string path = 3;
  string method = 4;
  map<string, string> headers = 5;
  optional bytes body = 6;
  uint64 body_length = 7;
}

message SendHttpResponse {
  uint32 status = 1;
  map<string, string> headers = 2;
  string url = 3;
  bytes body_stream = 4;
  uint64 content_length = 5;
}

// LocalStorage Agent
message StorageValue {
  oneof value {
    bytes bytes_value = 1;
    string string_value = 2;
    google.protobuf.Value json_value = 3;
  }
}

message LocalStorageGetRequest {
  saffron.execution.TaskKey task_key = 1;
  string key = 2;
}

message LocalStorageGetResponse {
  optional StorageValue value = 1;
}

message LocalStoragePutRequest {
  saffron.execution.TaskKey task_key = 1;
  string key = 2;
  StorageValue value = 3;
  optional uint64 timeout_seconds = 4;
}

message LocalStorageDeleteRequest {
  saffron.execution.TaskKey task_key = 1;
  string key = 2;
}

// Logging Agent
message LogRequest {
  saffron.execution.TaskKey task_key = 1;
  string level = 2;
  oneof message {
    string plaintext = 3;
    google.protobuf.Value json = 4;
  };
}

// Result Agent
message SetResultRequest {
  saffron.execution.TaskKey task_key = 1;
  google.protobuf.Value result = 2;
}

message SetHttpStatusCodeRequest {
  saffron.execution.TaskKey task_key = 1;
  uint32 status_code = 2;
}

// SessionStorage Agent
message SessionStorageGetRequest {
  saffron.execution.TaskKey task_key = 1;
  string key = 2;
}

message SessionStorageGetResponse {
  optional StorageValue value = 1;
}

message SessionStoragePutRequest {
  saffron.execution.TaskKey task_key = 1;
  string key = 2;
  StorageValue value = 3;
}

message SessionStorageDeleteRequest {
  saffron.execution.TaskKey task_key = 1;
  string key = 2;
}
